package org.zaproxy.addon.naf.component

import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.cancelAndJoin
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import me.d3s34.commix.CommixDockerEngine
import me.d3s34.commix.CommixRequest
import me.d3s34.docker.ContainerAttachClient
import me.d3s34.sqlmap.SqlmapApiEngine
import me.d3s34.sqlmap.restapi.request.StartTaskRequest
import me.d3s34.sqlmap.restapi.response.TaskDataResponse
import me.d3s34.tplmap.TplmapDockerEngine
import me.d3s34.tplmap.TplmapRequest

sealed class ExploitTabComponent(
    val title: String
) {
    abstract suspend fun exploit()
    abstract suspend fun onClose()
}

class StartTabComponent: ExploitTabComponent("Exploit") {
    override suspend fun exploit() {}

    override suspend fun onClose() {}
}

class SqlmapTabComponent(
    val sqlmapEngine: SqlmapApiEngine
): ExploitTabComponent(title = "Sqlmap") {
    val startRequestState = mutableStateOf(StartTaskRequest())
    val responseState = mutableStateOf<TaskDataResponse?>(null)
    val status = mutableStateOf(Status.NOT_RUN)

    override suspend fun exploit() {
        responseState.value = kotlin.runCatching {
            status.value = Status.RUNNING
            sqlmapEngine.attack(startRequestState.value)
        }
            .onFailure {
                status.value = Status.ERROR
            }
            .onSuccess {
                status.value = Status.DONE
            }
            .getOrDefault(responseState.value)
    }

    override suspend fun onClose() {}

    enum class Status {
        NOT_RUN, ERROR, RUNNING, DONE
    }
}

interface ShellTabComponent {
    val coroutineScope: CoroutineScope
    val hasNewLine: MutableState<Boolean>
    val status: StateFlow<ContainerAttachClient.Status>
    val shellContent: MutableStateFlow<List<String>>
    fun sendCommand(command: String)

    fun attachJob(client: ContainerAttachClient) {
        val writeJob = coroutineScope.launch {
            for (output in client.stdoutChannel) {
                val lines = output
                    .toString(Charsets.UTF_8)
                    .replace("\\u001B\\[[;\\d]*m".toRegex(), "")
                    .split("[\\r\\n]+".toRegex())
                    .filter { it.isNotBlank() }

                shellContent.update {
                    hasNewLine.value = true
                    it + lines
                }
            }
        }

        coroutineScope.launch {
            val callback = client.attach()!!
            client.start()

            callback.awaitCompletion()
            client.close()
            writeJob.cancelAndJoin()
        }
    }


    val notRunningState: StateFlow<ContainerAttachClient.Status>
        get() = MutableStateFlow(ContainerAttachClient.Status.NOT_RUNNING)
}

class CommixTabComponent(
    val commixDockerEngine: CommixDockerEngine,
    override val coroutineScope: CoroutineScope
): ExploitTabComponent(title = "Commix"), ShellTabComponent {
    val commixRequest = mutableStateOf(CommixRequest(""))
    override val shellContent = MutableStateFlow<List<String>>(emptyList())
    override val hasNewLine = mutableStateOf(false)

    lateinit var client: ContainerAttachClient

    override val status: StateFlow<ContainerAttachClient.Status>
        get() = if (this::client.isInitialized) {
            client.status
        } else {
            notRunningState
        }

    override suspend fun exploit() {
        client = commixDockerEngine.tryGetShell(commixRequest.value)
        attachJob(client)
    }

    override fun sendCommand(command: String) {
        client.send(command.toByteArray())
    }

    override suspend fun onClose() {}
}

class TplmapTabComponent(
    val tplmapDockerEngine: TplmapDockerEngine,
    override val coroutineScope: CoroutineScope
): ExploitTabComponent(title = "tplmap"), ShellTabComponent {
    val tplmapRequest = mutableStateOf(TplmapRequest("", osShell = true))
    override val shellContent = MutableStateFlow<List<String>>(emptyList())
    override val hasNewLine = mutableStateOf(false)
    lateinit var client: ContainerAttachClient

    override val status: StateFlow<ContainerAttachClient.Status>
        get() = if (this::client.isInitialized) {
            client.status
        } else {
            notRunningState
        }

    override fun sendCommand(command: String) {
        client.send(command.toByteArray())
    }

    override suspend fun exploit() {
        client = tplmapDockerEngine.tryGetShell(tplmapRequest.value)
        attachJob(client)
    }

    override suspend fun onClose() {}
}
