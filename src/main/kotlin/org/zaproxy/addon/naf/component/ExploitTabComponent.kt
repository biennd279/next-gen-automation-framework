package org.zaproxy.addon.naf.component

import androidx.compose.runtime.mutableStateOf
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.cancelAndJoin
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import me.d3s34.commix.CommixDockerEngine
import me.d3s34.commix.CommixRequest
import me.d3s34.docker.ContainerAttachClient
import me.d3s34.sqlmap.SqlmapApiEngine
import me.d3s34.sqlmap.restapi.request.StartTaskRequest
import me.d3s34.sqlmap.restapi.response.TaskDataResponse
import java.nio.charset.Charset

sealed class ExploitTabComponent(
    val title: String
) {
    abstract suspend fun exploit()
}

class StartTabComponent: ExploitTabComponent("Exploit") {
    override suspend fun exploit() {

    }
}

class SqlmapTabComponent(
    val sqlmapEngine: SqlmapApiEngine
): ExploitTabComponent(title = "Sqlmap") {
    val startRequestState = mutableStateOf(StartTaskRequest())
    val responseState = mutableStateOf<TaskDataResponse?>(null)
    val status = mutableStateOf(Status.NOT_RUN)

    override suspend fun exploit() {
        responseState.value = kotlin.runCatching {
            status.value = Status.RUNNING
            sqlmapEngine.attack(startRequestState.value)
        }
            .onFailure {
                status.value = Status.ERROR
            }
            .onSuccess {
                status.value = Status.DONE
            }
            .getOrDefault(responseState.value)
    }

    enum class Status {
        NOT_RUN, ERROR, RUNNING, DONE
    }
}

class CommixTabComponent(
    val commixDockerEngine: CommixDockerEngine,
    val coroutineScope: CoroutineScope
): ExploitTabComponent(title = "Commix") {
    val commixRequest = mutableStateOf(CommixRequest(""))
    val shellContent = MutableStateFlow<List<String>>(emptyList())
    lateinit var client: ContainerAttachClient

    val status: StateFlow<ContainerAttachClient.Status>
        get() = if (this::client.isInitialized) {
            client.status
        } else {
            notRunningState
        }

    override suspend fun exploit() {
        client = commixDockerEngine.tryGetShell(commixRequest.value)

         val writeJob = coroutineScope.launch {
            for (output in client.stdoutChannel) {
                shellContent.update {
                    it + output.toString(Charset.defaultCharset())
                }
            }
        }

        coroutineScope.launch {
            val callback = client.attach()!!
            client.start()

            callback.awaitCompletion()
            client.close()
            writeJob.cancelAndJoin()
        }
    }

    fun sendCommand(command: String) {
        client.send(command.toByteArray())
    }

    companion object {
        val notRunningState: StateFlow<ContainerAttachClient.Status> = MutableStateFlow(ContainerAttachClient.Status.NOT_RUNNING)
    }
}
