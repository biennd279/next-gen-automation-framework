package org.zaproxy.addon.naf.component

import androidx.compose.runtime.mutableStateListOf
import com.arkivanov.decompose.ComponentContext
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch
import org.parosproxy.paros.control.Control
import org.parosproxy.paros.extension.history.ExtensionHistory
import org.zaproxy.addon.naf.NafService
import org.zaproxy.addon.naf.model.ExploitEvent
import org.zaproxy.addon.naf.model.SqlInjectionEvent
import kotlin.coroutines.CoroutineContext
import kotlin.reflect.KClass

class ExploitComponent(
    componentContext: ComponentContext,
    val nafService: NafService,
    override val coroutineContext: CoroutineContext
): ComponentContext by componentContext, CoroutineScope {

    val listExploitTabComponent = mutableStateListOf<ExploitTabComponent>(StartTabComponent())

    private val extensionHistory: ExtensionHistory by lazy {
        Control
            .getSingleton()
            .extensionLoader
            .getExtension(ExtensionHistory::class.java)
    }

    fun handleExploitEvent(event: ExploitEvent) {
        when (event) {
            is SqlInjectionEvent -> {

            }
        }
    }

    fun createNewTab(tab: KClass<out ExploitTabComponent>): ExploitTabComponent {
        return when (tab) {
            SqlmapTabComponent::class -> {
                SqlmapTabComponent(sqlmapEngine = nafService.sqlmapEngine!!)
            }
            CommixTabComponent::class -> {
                CommixTabComponent(
                    commixDockerEngine = nafService.commixDockerEngine!!,
                    coroutineScope = this
                )
            }
            else -> { StartTabComponent() }
        }
    }

    fun startAttack(index: Int) {
        launch {
            listExploitTabComponent[index].exploit()
        }
    }
}
