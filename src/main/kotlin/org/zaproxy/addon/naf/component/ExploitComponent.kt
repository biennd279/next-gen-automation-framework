package org.zaproxy.addon.naf.component

import androidx.compose.runtime.snapshots.SnapshotStateList
import com.arkivanov.decompose.ComponentContext
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import me.d3s34.sqlmap.restapi.request.StartTaskRequest
import org.parosproxy.paros.control.Control
import org.parosproxy.paros.extension.history.ExtensionHistory
import org.zaproxy.addon.naf.NafService
import org.zaproxy.addon.naf.model.ExploitEvent
import org.zaproxy.addon.naf.model.SqlInjectionEvent
import org.zaproxy.zap.extension.alert.ExtensionAlert
import java.nio.charset.Charset
import kotlin.coroutines.CoroutineContext
import kotlin.reflect.KClass

class ExploitComponent(
    componentContext: ComponentContext,
    val nafService: NafService,
    val listExploitTabComponent: SnapshotStateList<ExploitTabComponent>,
    override val coroutineContext: CoroutineContext
): ComponentContext by componentContext, CoroutineScope {

    private val extensionHistory: ExtensionHistory by lazy {
        Control
            .getSingleton()
            .extensionLoader
            .getExtension(ExtensionHistory::class.java)
    }

    private val extensionAlert by lazy {
        Control
            .getSingleton()
            .extensionLoader
            .getExtension(ExtensionAlert::class.java)
    }

    val currentIndex = MutableStateFlow(0)

    fun handleExploitEvent(event: ExploitEvent) {
        when (event) {
            is SqlInjectionEvent -> {
                val nafAlert = event.alert
                val historyRef = extensionAlert
                    .allAlerts
                    .firstOrNull { it.alertId == nafAlert.id.toInt() }
                    ?.historyRef

                val sqlmapTabComponent = SqlmapTabComponent(nafService.sqlmapEngine!!)

                historyRef?.let {
                    sqlmapTabComponent.startRequestState.value = StartTaskRequest(
                        url = historyRef.uri.toString(),
                        data = historyRef.httpMessage.requestBody.content.toString(Charset.defaultCharset()),
                        cookie = historyRef.httpMessage.cookieParamsAsString
                    )
                }

                listExploitTabComponent
                    .add(sqlmapTabComponent)

                currentIndex.update {
                    listExploitTabComponent.lastIndex
                }
            }
            else -> {}
        }
    }

    fun createNewTab(tab: KClass<out ExploitTabComponent>): ExploitTabComponent {
        return when (tab) {
            SqlmapTabComponent::class -> {
                SqlmapTabComponent(sqlmapEngine = nafService.sqlmapEngine!!)
            }
            CommixTabComponent::class -> {
                CommixTabComponent(
                    commixDockerEngine = nafService.commixDockerEngine!!,
                    coroutineScope = this
                )
            }
            else -> { StartTabComponent() }
        }
    }

    fun startAttack(index: Int) {
        launch {
            listExploitTabComponent[index].exploit()
        }
    }
}
