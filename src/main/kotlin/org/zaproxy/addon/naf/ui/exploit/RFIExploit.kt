package org.zaproxy.addon.naf.ui.exploit

import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Send
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import org.zaproxy.addon.naf.model.RfiRequest
import java.net.URL

@Composable
fun RfiExploitTab(
    rfiRequest: MutableState<RfiRequest>,
    response: State<String>,
    execCommand: () -> Unit,
) {
    Row {
        Column(
            modifier = Modifier.weight(1f)
        ) {
            OutlinedTextField(
                value = rfiRequest.value.command ?: "",
                onValueChange = {
                    rfiRequest.value = rfiRequest.value.copy(command = it)
                },
                label = {
                    Text("Command")
                },
                singleLine = true,
                trailingIcon = {
                    IconButton(
                        onClick = {
                            execCommand()
                        }
                    ) {
                        Icon(Icons.Default.Send, "Exec")
                    }
                },
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(Modifier.height(10.dp))

            val expanded = remember { mutableStateOf(rfiRequest.value.url == null) }

            Spacer(Modifier.height(10.dp))

            Button(
                onClick = {
                    expanded.value = true
                }
            ) {
                Text("Edit Target")
            }

            Spacer(Modifier.height(10.dp))

            if (expanded.value) {
                with(rfiRequest) {
                    OutlinedTextField(
                        value = value.url.toString(),
                        onValueChange = {
                            value = value.copy(url = kotlin.runCatching { URL(it) }.getOrNull())
                        },
                        label = { Text("Target") },
                        modifier = Modifier.fillMaxWidth(),
                        singleLine = true,
                    )

                    OutlinedTextField(
                        value = value.param,
                        onValueChange = {
                            value = value.copy(param = it)
                        },
                        label = { Text("param") },
                        modifier = Modifier.fillMaxWidth(),
                        singleLine = true,
                    )

                    OutlinedTextField(
                        value = value.data ?: "",
                        onValueChange = {
                            value = value.copy(data = it)
                        },
                        label = { Text("Data") },
                        modifier = Modifier.fillMaxWidth(),
                    )

                    OutlinedTextField(
                        value = value.cookie ?: "",
                        onValueChange = {
                            value = value.copy(cookie = it)

                        },
                        label = { Text("Cookies") },
                        modifier = Modifier.fillMaxWidth(),
                    )

                    Button(
                        onClick = {
                            expanded.value = false
                        }
                    ) {
                        Text("Save")
                    }
                }
            }
        }


        Spacer(Modifier.width(10.dp))

        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                "Response",
                style = MaterialTheme.typography.subtitle1
            )

            Spacer(Modifier.height(20.dp))

            OutlinedTextField(
                value = response.value,
                onValueChange = {},
                modifier = Modifier.fillMaxWidth()
            )
        }
    }
}