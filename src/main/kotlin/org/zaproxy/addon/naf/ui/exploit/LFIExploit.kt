package org.zaproxy.addon.naf.ui.exploit

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import me.d3s34.lfi.LfiExploiter
import org.zaproxy.addon.naf.model.LfiRequest
import java.net.URL

@Composable
fun LfiExploitTab(
    lfiRequest: MutableState<LfiRequest>,
    currentFile: MutableState<String>,
    onChangeFile: () -> Unit,
    onChangeOtherInfo: () -> Unit
) {
    Row {
        Column(
            modifier = Modifier.weight(1f)
        ) {
            with(lfiRequest) {
                Row {
                    val expanded = remember { mutableStateOf(false) }

                    OutlinedTextField(
                        value = value.filePath,
                        onValueChange = {
                            value = value.copy(filePath = it)
                            onChangeFile()
                        },
                        trailingIcon = {
                            IconButton(
                                onClick =  {
                                    expanded.value = true
                                }
                            ) {
                                Icon(Icons.Default.ArrowDropDown, "More")
                            }
                        },
                        modifier = Modifier.fillMaxWidth()
                    )

                    DropdownMenu(
                        expanded = expanded.value,
                        onDismissRequest = {
                            expanded.value = false
                        }
                    ) {
                        LfiExploiter.nixFileProof.forEach { file ->
                            DropdownMenuItem(
                                onClick = {
                                    expanded.value = false
                                    value = value.copy(filePath = file)
                                    onChangeFile()
                                }
                            ) {
                                Text(file)
                            }
                        }
                    }
                }

                Divider()

                val expanded = remember { mutableStateOf(lfiRequest.value.url == null) }

                Spacer(Modifier.height(10.dp))

                Button(
                    onClick = {
                        expanded.value = true
                    }
                ) {
                    Text("Edit Target")
                }

                Spacer(Modifier.height(10.dp))


                if (expanded.value) {
                    OutlinedTextField(
                        value = value.url.toString(),
                        onValueChange = {
                            value = value.copy(url = URL(it))
                        },
                        label = { Text("Target") },
                        modifier = Modifier.fillMaxWidth(),
                        singleLine = true,
                    )

                    OutlinedTextField(
                        value = value.vectorAttack,
                        onValueChange = {
                            value = value.copy(vectorAttack = it)
                        },
                        label = { Text("vectorAttack") },
                        modifier = Modifier.fillMaxWidth(),
                        singleLine = true,
                    )

                    OutlinedTextField(
                        value = value.param,
                        onValueChange = {
                            value = value.copy(param = it)
                        },
                        label = { Text("param") },
                        modifier = Modifier.fillMaxWidth(),
                        singleLine = true,
                    )

                    OutlinedTextField(
                        value = value.data ?: "",
                        onValueChange = {
                            value = value.copy(data = it)
                        },
                        label = { Text("Data") },
                        modifier = Modifier.fillMaxWidth(),
                    )

                    OutlinedTextField(
                        value = value.cookie,
                        onValueChange = {
                            value = value.copy(cookie = it)

                        },
                        label = { Text("Cookies") },
                        modifier = Modifier.fillMaxWidth(),
                    )

                    Button(
                        onClick = {
                            expanded.value = false
                            onChangeOtherInfo()
                        }
                    ) {
                        Text("Save")
                    }
                }
            }
        }

        Spacer(modifier = Modifier.width(10.dp))

        Column(
            modifier = Modifier.weight(1f)
        ) {
            val scrollState = rememberScrollState(0)
            Text(
                text = currentFile.value,
                modifier = Modifier
                    .verticalScroll(scrollState)
            )
        }
    }
}
