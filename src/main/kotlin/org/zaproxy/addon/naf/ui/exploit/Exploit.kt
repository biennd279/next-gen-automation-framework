package org.zaproxy.addon.naf.ui.exploit

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material.Icon
import androidx.compose.material.ScrollableTabRow
import androidx.compose.material.Tab
import androidx.compose.material.Text
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.AddCircle
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.flow.asStateFlow
import org.zaproxy.addon.naf.component.ExploitComponent
import org.zaproxy.addon.naf.model.CommixTab
import org.zaproxy.addon.naf.model.ExploitTab
import org.zaproxy.addon.naf.model.SqlmapTab
import org.zaproxy.addon.naf.model.StartTab
import kotlin.reflect.KClass

@Composable
fun Exploit(
    component: ExploitComponent
) {

    val indexTabSelected = remember { mutableStateOf(0) }
    val listTab = component.listExploitTab
    val currentIndex = indexTabSelected.value

    Column {
        ScrollableTabRow(
            selectedTabIndex = currentIndex,
            modifier = Modifier.wrapContentWidth(),
            edgePadding = 10.dp
        ) {
            listTab.forEachIndexed { index, tab ->
                Tab(
                    selected = currentIndex == index,
                    onClick = {
                        indexTabSelected.value = index
                    }
                ) {
                    Column {
                        Text(tab.title)
                    }
                }
            }

            Tab(
                selected = false,
                onClick = {
                    listTab.add(StartTab())
                    indexTabSelected.value = listTab.size - 1
                },
            ) {
                Icon(Icons.Default.AddCircle, "New exploit")
            }
        }

        Spacer(modifier = Modifier.height(20.dp))

        when (val tab = listTab[currentIndex]) {
            is StartTab -> {
                StartExploitTab(
                    replaceCurrentTab = {
                        listTab[indexTabSelected.value] = component.createNewTab(it)
                    }
                )
            }
            is SqlmapTab -> {
                SqlExploitTab(
                    startTaskRequest = tab.startRequestState,
                    response = tab.responseState,
                    status = tab.status,
                    onStartAttack = {
                        component.startAttack(currentIndex)
                    }
                )
            }
            is CommixTab -> {
                CommixExploitTab(
                    commixRequest = tab.commixRequest,
                    startAttack = {
                        component.startAttack(currentIndex)
                    },
                    shellContent = tab.shellContent.asStateFlow().collectAsState(),
                    onSendCommand = tab::sendCommand
                )
            }
        }
    }

}

@Composable
fun StartExploitTab(
    replaceCurrentTab: (KClass<out ExploitTab>) -> Unit
) {
    Column {
        Row(
            modifier = Modifier
                .clickable {
                    replaceCurrentTab(SqlmapTab::class)
                }
        ) {
            Icon(Icons.Default.Add, "New exploit")
            Text("New sqlmap exploit")
        }


        Row(
            modifier = Modifier
                .clickable {
                    replaceCurrentTab(CommixTab::class)
                }
        ) {
            Icon(Icons.Default.Add, "New exploit")
            Text("New commix exploit")
        }
    }
}
