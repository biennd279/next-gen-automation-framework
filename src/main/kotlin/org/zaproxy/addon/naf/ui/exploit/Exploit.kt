package org.zaproxy.addon.naf.ui.exploit

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material.Icon
import androidx.compose.material.MaterialTheme.typography
import androidx.compose.material.ScrollableTabRow
import androidx.compose.material.Tab
import androidx.compose.material.Text
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.AddCircle
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.flow.asStateFlow
import org.zaproxy.addon.naf.component.*
import org.zaproxy.addon.naf.component.tab.*
import org.zaproxy.addon.naf.ui.collectAsMutableState
import kotlin.reflect.KClass

@Composable
fun Exploit(
    component: ExploitComponent
) {

    val indexTabSelected = component.currentIndex.collectAsMutableState()
    val listTab = component.listExploitTabComponent

    Column {
        ScrollableTabRow(
            selectedTabIndex = indexTabSelected.value,
            modifier = Modifier.wrapContentWidth(),
            edgePadding = 10.dp
        ) {
            listTab.forEachIndexed { index, tab ->
                Tab(
                    selected = indexTabSelected.value == index,
                    onClick = {
                        indexTabSelected.value = index
                    }
                ) {
                    Column {
                        Text(tab.title)
                    }
                }
            }

            Tab(
                selected = false,
                onClick = {
                    listTab.add(StartTabComponent())
                    indexTabSelected.value = listTab.size - 1
                },
            ) {
                Icon(Icons.Default.AddCircle, "New exploit")
            }
        }

        Spacer(modifier = Modifier.height(20.dp))

        when (val tab = listTab[indexTabSelected.value]) {
            is StartTabComponent -> {
                StartExploitTab(
                    replaceCurrentTab = {
                        listTab[indexTabSelected.value] = component.createNewTab(it)
                    }
                )
            }
            is SqlmapTabComponent -> {
                SqlExploitTab(
                    startTaskRequest = tab.startRequestState,
                    response = tab.responseState,
                    status = tab.status,
                    onStartAttack = {
                        component.startAttack(indexTabSelected.value)
                    }
                )
            }
            is CommixTabComponent -> {
                CommixExploitTab(
                    commixRequest = tab.commixRequest,
                    startAttack = {
                        component.startAttack(indexTabSelected.value)
                    },
                    shellContent = tab.shellContent.asStateFlow().collectAsState(),
                    onSendCommand = {
                        tab.sendCommand(if (it.endsWith("\n")) it else "$it\n")
                    },
                    hasNewLine = tab.hasNewLine,
                    status = tab.status.collectAsState(),
                )
            }
            is TplmapTabComponent -> {
                TplmapExploitTab(
                    tplmapRequest = tab.tplmapRequest,
                    startAttack = {
                        component.startAttack(indexTabSelected.value)
                    },
                    shellContent = tab.shellContent.asStateFlow().collectAsState(),
                    onSendCommand = {
                        tab.sendCommand(if (it.endsWith("\n")) it else "$it\n")
                    },
                    hasNewLine = tab.hasNewLine,
                    status = tab.status.collectAsState()
                )
            }
        }
    }

}

@Composable
fun StartExploitTab(
    replaceCurrentTab: (KClass<out ExploitTabComponent>) -> Unit
) {
    Column {

        Spacer(Modifier.padding(10.dp))

        Row(
            modifier = Modifier
                .clickable {
                    replaceCurrentTab(SqlmapTabComponent::class)
                }
        ) {
            Icon(Icons.Default.Add, "New exploit")
            Text(
                text = "New sqlmap exploit",
                style = typography.subtitle1
            )
        }

        Spacer(Modifier.padding(10.dp))

        Row(
            modifier = Modifier
                .clickable {
                    replaceCurrentTab(CommixTabComponent::class)
                }
        ) {
            Icon(Icons.Default.Add, "New exploit")
            Text(
                text = "New commix exploit",
                style = typography.subtitle1
            )
        }

        Spacer(Modifier.padding(10.dp))

        Row(
            modifier = Modifier
                .clickable {
                    replaceCurrentTab(TplmapTabComponent::class)
                }
        ) {
            Icon(Icons.Default.Add, "New exploit")
            Text(
                text = "New tplmap exploit",
                style = typography.subtitle1
            )
        }
    }
}
