package org.zaproxy.addon.naf.ui.exploit

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowUp
import androidx.compose.material.icons.filled.Send
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import me.d3s34.commix.CommixRequest
import org.zaproxy.addon.naf.ui.wizard.LabelCheckBox

@Composable
fun CommixExploitTab(
    commixRequest: MutableState<CommixRequest>,
    startAttack: () -> Unit,
    shellContent: State<List<String>>,
    onSendCommand: (String) -> Unit,
    hasNewLine: MutableState<Boolean>
) {
    Column {
        val expanded = remember { mutableStateOf(true) }

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable {
                   expanded.value = !expanded.value
                },
            horizontalArrangement = Arrangement.Center
        ) {
            Text(
                text = "Target",
                style = MaterialTheme.typography.subtitle1
            )

            if (expanded.value) {
                Icon(Icons.Default.KeyboardArrowUp, "more")
            } else {
                Icon(Icons.Default.KeyboardArrowUp, "more")
            }
        }

        if (expanded.value) {
            with(commixRequest) {
                OutlinedTextField(
                    value = value.url,
                    onValueChange = { value = value.copy(url = it) },
                    label = { Text("Target") },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                )

                OutlinedTextField(
                    value = value.data ?: "",
                    onValueChange = { value = value.copy(data = it) },
                    label = { Text("Data") },
                    modifier = Modifier.fillMaxWidth(),
                )

                OutlinedTextField(
                    value = value.cookies ?: "",
                    onValueChange = { value = value.copy(cookies = it) },
                    label = { Text("Cookies") },
                    modifier = Modifier.fillMaxWidth(),
                )

                LabelCheckBox(
                    checkedState = value.randomAgent,
                    onCheckedChange = {
                        value = value.copy(randomAgent = it)
                    },
                    text = "Random Agent"
                )

                Divider()

                Button(
                    onClick = {
                        startAttack()
                        expanded.value = false
                    }
                ) {
                    Text("Try get shell")
                }
            }
        }

        Column {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable {
                        expanded.value = !expanded.value
                    },
                horizontalArrangement = Arrangement.Center
            ) {
                Text(
                    text = "Shell",
                    style = MaterialTheme.typography.subtitle1
                )
            }

            Row(
                modifier = Modifier
                    .fillMaxHeight()
                    .weight(1f)
            ) {
                val listState = rememberLazyListState()

                LaunchedEffect(hasNewLine.value) {
                    if (hasNewLine.value && listState.layoutInfo.totalItemsCount > 0) {
                        listState.animateScrollToItem(listState.layoutInfo.totalItemsCount - 1)
                        hasNewLine.value = false
                    }
                }

                LazyColumn(
                    state = listState,
                    contentPadding = PaddingValues(20.dp),
                    modifier = Modifier
                        .fillMaxHeight()
                ) {
                    items(shellContent.value) {
                        Text(it)
                    }
                }
            }


            val command = remember { mutableStateOf("") }
            //TODO: handle key enter event
            TextField(
                value = command.value,
                onValueChange = command::value::set,
                trailingIcon = {
                    IconButton(
                        onClick = {
                            onSendCommand(command.value)
                            command.value = ""
                        }
                    ) {
                        Icon(Icons.Default.Send, "Send command")
                    }
                },
                modifier = Modifier
                    .fillMaxWidth(),
                singleLine = true
            )
        }
    }
}
