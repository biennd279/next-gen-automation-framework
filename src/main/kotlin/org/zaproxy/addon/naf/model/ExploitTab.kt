package org.zaproxy.addon.naf.model

import androidx.compose.runtime.mutableStateOf
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.update
import me.d3s34.commix.CommixRequest
import me.d3s34.sqlmap.SqlmapApiEngine
import me.d3s34.sqlmap.restapi.request.StartTaskRequest
import me.d3s34.sqlmap.restapi.response.TaskDataResponse

sealed class ExploitTab(
    val title: String
) {
    abstract suspend fun exploit()
}

class StartTab: ExploitTab("Exploit") {
    override suspend fun exploit() {

    }
}

class SqlmapTab(
    val sqlmapEngine: SqlmapApiEngine
): ExploitTab(title = "Sqlmap") {
    val startRequestState = mutableStateOf(StartTaskRequest())
    val responseState = mutableStateOf<TaskDataResponse?>(null)
    val status = mutableStateOf(Status.NOT_RUN)

    override suspend fun exploit() {
        responseState.value = kotlin.runCatching {
            status.value = Status.RUNNING
            sqlmapEngine.attack(startRequestState.value)
        }
            .onFailure {
                status.value = Status.ERROR
            }
            .onSuccess {
                status.value = Status.DONE
            }
            .getOrDefault(responseState.value)
    }

    enum class Status {
        NOT_RUN, ERROR, RUNNING, DONE
    }
}

class CommixTab(): ExploitTab(title = "Commix") {
    val commixRequest = mutableStateOf(CommixRequest(""))
    val shellContent = MutableStateFlow<List<String>>(emptyList())

    override suspend fun exploit() {

    }

    fun sendCommand(command: String) {
        println("Receive $command")
        shellContent.update {
            it + command
        }
    }
}
